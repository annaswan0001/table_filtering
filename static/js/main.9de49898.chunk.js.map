{"version":3,"sources":["Loader.js","Table.jsx","TableSearch.jsx","DetailRowView.js","ModeSelector.jsx","App.js","serviceWorker.js","index.js"],"names":["className","props","onClick","onSort","sortField","sort","src","alt","data","map","length","item","onRowSelect","key","id","phone","firstName","lastName","email","useState","value","setValue","onSearch","type","onChange","event","target","person","Fragment","defaultValue","description","address","streetAddress","city","state","zip","selectAmount","amount","url","onSelect","App","isModeSelected","loader","row","currentPage","cloneData","concat","_","orderBy","setState","fetchData","pageChangeHandler","selected","onInputChange","e","inputValue","searchHandler","search","fetch","response","json","this","console","log","result","filter","toLowerCase","includes","toString","filteredData","getFilteredData","pageCount","Math","ceil","displayData","chunk","ModeSelector","TableSearch","Table","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","activeClassName","pageClassName","pageLinkClassName","previousClassName","nextClassName","previousLinkClassName","nextLinkClassName","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9de49898.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.css';\n\nexport default () =><div className=\"lds-heart\"><div></div></div>","import React from \"react\";\n\nexport default props => (\n  <table className=\"table\">\n    <thead>\n      <tr >\n        <th\n          onClick={() => {\n            props.onSort(\"id\");\n          }}\n        >\n          ID {props.sortField === \"id\" ? <small>{props.sort===\"asc\"?<img src='https:icon.now.sh/chevron/up' alt='chevron icon' />: <img src='https:icon.now.sh/chevron/down' alt='chevron icon' />}</small> : null}\n        </th>\n        <th\n          onClick={() => {\n            props.onSort(\"firstName\");\n          }}\n        >\n          First Name{\" \"}\n          {props.sortField === \"firstName\" ? <small>{props.sort===\"asc\"?<img src='https:icon.now.sh/chevron/up' alt='chevron icon' />: <img src='https:icon.now.sh/chevron/down' alt='chevron icon' />}</small> : null}\n        </th>\n        <th\n          onClick={() => {\n            props.onSort(\"lastName\");\n          }}\n        >\n          Last Name{\" \"}\n          {props.sortField === \"lastName\" ? <small>{props.sort===\"asc\"?<img src='https:icon.now.sh/chevron/up' alt='chevron icon' />: <img src='https:icon.now.sh/chevron/down' alt='chevron icon' />}</small> : null}\n        </th>\n        <th\n          onClick={() => {\n            props.onSort(\"email\");\n          }}\n        >\n          E-mail\n          {props.sortField === \"email\" ? <small>{props.sort===\"asc\"?<img src='https:icon.now.sh/chevron/up' alt='chevron icon' />: <img src='https:icon.now.sh/chevron/down' alt='chevron icon' />}</small> : null}\n        </th>\n        <th\n          onClick={() => {\n            props.onSort(\"phone\");\n          }}\n        >\n          Phone{\" \"}\n          {props.sortField === \"phone\" ? <small>{props.sort===\"asc\"?<img src='https:icon.now.sh/chevron/up' alt='chevron icon' />: <img src='https:icon.now.sh/chevron/down' alt='chevron icon' />}</small> : null}\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      {props.data.map.length>0 && props.data.map(item => (\n        <tr onClick={()=>{props.onRowSelect(item)}} key={item.id + item.phone}>\n          <td\n            onClick={() => {\n              props.onSort(\"id\");\n            }}\n          >\n            {item.id}\n          </td>\n          <td\n            onClick={() => {\n              props.onSort(\"firstName\");\n            }}\n          >\n            {item.firstName}\n          </td>\n          <td\n            onClick={() => {\n              props.onSort(\"lastName\");\n            }}\n          >\n            {item.lastName}\n          </td>\n          <td\n            onClick={() => {\n              props.onSort(\"email\");\n            }}\n          >\n            {item.email}\n          </td>\n          <td\n            onClick={() => {\n              props.onSort(\"phone\");\n            }}\n          >\n            {item.phone}\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import React, {useState} from 'react'\n\nexport default props => {\n    const [value, setValue] = useState('')\n    const valueChangeHandler = event => {\n        setValue(event.target.value)\n      }\n    const search=() =>{\n        props.onSearch(value)\n        setValue(\"\")\n    }\n    return (\n      <>\n        <div className=\"input-group mb-3 mt-3\">\n          <div className=\"input-group-prepend\">\n            <button\n              className=\"btn btn-outline-secondary\"\n              onClick={search}\n            >\n              Search\n            </button>\n          </div>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            onChange={valueChangeHandler}\n            value={value}\n          />\n        </div>\n\n        <p className=\"text-center\">\n          The search will show any matching values. If there is no match,\n          then all the data.\n        </p>\n        <p className=\"text-center\">To sort, click on the title.</p>\n        <p className=\"text-center\">Click on each row - view details</p>\n      </>\n    );\n}\n","import React from \"react\";\n\nexport default ({ person }) => (\n  <React.Fragment>\n    {person && (\n      <div>\n        <p>\n          Выбран пользователь <b>{person.firstName + \" \" + person.lastName}</b>\n        </p>\n        <p>\n          Описание: <br />\n          <textarea defaultValue={person.description} />\n        </p>\n        <p>\n          Адрес проживания: <b>{person.address.streetAddress}</b>\n        </p>\n        <p>\n          Город: <b>{person.address.city}</b>\n        </p>\n        <p>\n          Провинция/штат: <b>{person.address.state}</b>\n        </p>\n        <p>\n          Индекс: <b>{person.address.zip}</b>\n        </p>{\" \"}\n      </div>\n    )}\n  \n</React.Fragment>\n);\n","import React from 'react';\n\nexport default props =>{\n\n    const selectAmount=(amount)=>{\n        const url = `http://www.filltext.com/?rows=${amount}&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`;\n        props.onSelect(url)\n    }\n    \n    return (\n        <div className=\"d-flex\" >\n            <button  onClick={()=>selectAmount(32)} className=\"m-2 btn btn-success\">32 элемента</button>\n            <button onClick={()=>selectAmount(1000)} className=\"m-2 btn btn-danger\">1000 элементов</button>\n        </div>\n    )\n}","import React from \"react\";\nimport Loader from \"./Loader\";\nimport Table from \"./Table\";\nimport TableSearch from './TableSearch'\nimport DetaiRowView from \"./DetailRowView\";\nimport _ from \"lodash\";\nimport \"./index.css\";\nimport ModeSelector from \"./ModeSelector\";\nimport ReactPaginate from \"react-paginate\";\n\nclass App extends React.Component {\n    state = {\n        isModeSelected: false,\n        loader: false,\n        data: [],\n        sort: \"asc\",\n        sortField: \"id\",\n        row: \"\",\n        currentPage: 0,\n      \n        \n    };\n\n    onSort = sortField => {\n        const cloneData = this.state.data.concat(); //clone data\n        const sort = this.state.sort === \"asc\" ? \"desc\" : \"asc\"; //sort direction\n        const data = _.orderBy(cloneData, sortField, sort);\n\n        this.setState({\n            data,\n            sort,\n            sortField\n        });\n    };\n\n    onRowSelect = row => {\n        this.setState({\n            row\n        });\n    };\n\n    onSelect = url => {\n        this.setState({\n            loader: true,\n            isModeSelected: true\n        });\n        this.fetchData(url);\n    };\n\n    async fetchData(url) {\n        try {\n            const response = await fetch(url);\n            const data = await response.json();\n            this.setState({\n                loader: false,\n                data: _.orderBy(data, this.state.sortField, this.state.sort)\n            });\n            console.log(data);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    pageChangeHandler = ({ selected }) =>\n        this.setState({ currentPage: selected });\n\n        \n    getFilteredData() {\n        const { data, search } = this.state;\n        console.log(data)\n\n        if (!search) {\n            return data;\n        }\n        let result = data.filter(item => {\n            return (\n                item.firstName\n                    .toLowerCase()\n                    .includes(search.toLowerCase()) ||\n                item.lastName.toLowerCase().includes(search.toLowerCase()) ||\n                item.email.toLowerCase().includes(search.toLowerCase()) ||\n                item.id.toString().includes(search)\n\n\n                   // (item.firstName\n                //     .toLowerCase()\n                //     .indexOf(search.toLowerCase()) >=0) ||\n                // (item.lastName.toLowerCase().indexOf(search.toLowerCase()) >=0) ||\n                // (item.email.toLowerCase().indexOf(search.toLowerCase()) >=0) ||\n                // (item.id.toString().indexOf(search)>=0)\n            );\n        });\n        if (!result) {\n            result = [];\n        }\n\n        return result;\n    }\n\n    onInputChange = e => {\n        this.setState({ inputValue: e.target.value });\n    };\n\n    searchHandler = search => {\n        this.setState({search, currentPage: 0})\n      }\n\n    render() {\n        const { row, inputValue, loader, data, isModeSelected } = this.state;\n        const filteredData = this.getFilteredData();\n        const pageSize = 10;\n        const pageCount = Math.ceil(filteredData.length / pageSize);\n        const displayData = _.chunk(filteredData, pageSize)[\n            this.state.currentPage\n        ]\n            ? _.chunk(filteredData, pageSize)[this.state.currentPage]\n            : [];\n\n        return (\n            <div className=\"container\">\n                {!isModeSelected ? (\n                    <ModeSelector onSelect={this.onSelect} />\n                ) : loader ? (\n                    <Loader />\n                ) : (\n                    <React.Fragment>\n                        <ModeSelector onSelect={this.onSelect} />\n                        <TableSearch onSearch={this.searchHandler}/>\n\n                        <Table\n                            onSort={this.onSort}\n                            data={displayData}\n                            sort={this.state.sort}\n                            sortField={this.state.sortField}\n                            onRowSelect={this.onRowSelect}\n                        />\n                        <DetaiRowView person={row} />\n\n                        {data.length > pageSize ? (\n                            <ReactPaginate\n                                previousLabel={\"<\"}\n                                nextLabel={\">\"}\n                                breakLabel={\"...\"}\n                                breakClassName={\"break-me\"}\n                                pageCount={pageCount}\n                                marginPagesDisplayed={3}\n                                pageRangeDisplayed={3}\n                                onPageChange={this.pageChangeHandler}\n                                containerClassName={\"pagination\"}\n                                activeClassName={\"active\"}\n                                pageClassName=\"page-item\"\n                                pageLinkClassName=\"page-link\"\n                                previousClassName=\"page-item\"\n                                nextClassName=\"page-item\"\n                                previousLinkClassName=\"page-link\"\n                                nextLinkClassName=\"page-link\"\n                            />\n                        ) : (\n                            \"\"\n                        )}\n                    </React.Fragment>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}